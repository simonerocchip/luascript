##################################################################################################
#
# Modify and *rename* this file to specify how to rebuild a Lua configuration from scratch
# Note: Lua code can be freely added after the | symbol, but cannot contain blank new lines
# See the YAML syntax for more detail: http://yaml.org/refcard.html
#
# For each auto-plugged slot generated using the 'all' selection, a corresponding array will be
# made automatically available to access the generated slots programmatically. For example:
#
# slots:
#    container:
#       class: FuelContainer
#       select: all
#
# will generate the array container[i], with i between 1 and container_size.
#
##################################################################################################

name: Sample Autoconfigurator

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    container:
        class: FuelContainer
        select: all
    gyro:
        class: GyroUnit

handlers:
    unit:
        start:
            lua: |
                Nav = Navigator.new(self.system, self.core, self.unit)
                for i=1,container_size do container[i].show() end
                if antigrav ~= nil then antigrav.show() end
                if gyro ~= nil then gyro.show() end
                core.show()
        stop:
            lua: |
                for i=1,container_size do container[i].hide() end
                if antigrav ~= nil then antigrav.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()

    system:
        start:
            lua: |
                pitchInput = 0
                rollInput = 0
                liftInput = 0
                yawInput = 0
                brakeInput = 0
        flush:
            lua: |
                -- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu
                local rotationSpeed = 2 --export: rotation speed in rad/s
                local torqueFactor = 1 --export: force factor applied to reach rotationSpeed, high value may be unstable

                -- Rotation
                local worldUp = vec3(self.core.getConstructWorldOrientationUp())
                local worldForward = vec3(self.core.getConstructWorldOrientationForward())
                local worldRight = vec3(self.core.getConstructWorldOrientationRight())

                local currentAngularVelocity = vec3(self.core.getWorldAngularVelocity())
                local targetAngularVelocity = pitchInput * worldRight + rollInput * worldForward + yawInput * worldUp
                targetAngularVelocity = rotationSpeed * targetAngularVelocity:normalize()

                local angularAccel = torqueFactor * (targetAngularVelocity - currentAngularVelocity)
                local airAcceleration = vec3(self.core.getWorldAirFrictionAngularAcceleration())
                angularAccel = angularAccel - airAcceleration -- Try to compensate air friction
                Nav:setEngineCommand('torque', vec3(), angularAccel)

                -- Translation
                Nav:setEngineCommandFromThrottle('thrust analog longitudinal', axisCommandId.longitudinal)
                Nav:setEngineCommand('thrust analog vertical', Nav:composeLiftUpAcceleration(liftInput), vec3())
                Nav:setBoosterCommand('rocket_engine')
        update:
            lua: Nav:update()

        actionStart:
            args: [forward]
            lua: pitchInput = pitchInput - 1
        actionStop:
            args: [forward]
            lua: pitchInput = pitchInput + 1
        actionStart:
            args: [backward]
            lua: pitchInput = pitchInput + 1
        actionStop:
            args: [backward]
            lua: pitchInput = pitchInput - 1
        actionStart:
            args: [left]
            lua: rollInput = rollInput - 1
        actionStop:
            args: [left]
            lua: rollInput = rollInput + 1
        actionStart:
            args: [right]
            lua: rollInput = rollInput + 1
        actionStop:
            args: [right]
            lua: rollInput = rollInput - 1
        actionStart:
            args: [up]
            lua: liftInput = liftInput + 1
        actionStop:
            args: [up]
            lua: liftInput = liftInput - 1
        actionStart:
            args: [down]
            lua: liftInput = liftInput - 1
        actionStop:
            args: [down]
            lua: liftInput = liftInput + 1
        actionStart:
            args: [yawright]
            lua: yawInput = yawInput - 1
        actionStop:
            args: [yawright]
            lua: yawInput = yawInput + 1
        actionStart:
            args: [yawleft]
            lua: yawInput = yawInput + 1
        actionStop:
            args: [yawleft]
            lua: yawInput = yawInput - 1
        actionStart:
            args: [brake]
            lua: brakeInput = 1
        actionStop:
            args: [brake]
            lua: brakeInput = 0
        actionStart:
            args: [booster]
            lua: Nav:toggleBoosters()
        actionStart:
            args: [stopengines]
            lua: Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 0)
        actionLoop:
            args: [speedup]
            lua: Nav.axisCommandManager:updateThrottleCommand(axisCommandId.longitudinal, 0.05)
        actionLoop:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateThrottleCommand(axisCommandId.longitudinal, -0.05)
        actionStart:
            args: [antigravity]
            lua: if antigrav ~= nil then antigrav.toggle() end
        actionStart:
            args: [option1]
            lua: |
                altitude = 20 --export
                Nav.axisCommandManager:setTargetGroundAltitude(altitude)
        actionStop:
            args: [option1]
            lua: Nav.axisCommandManager:setTargetGroundAltitude(4)
